{"version":3,"sources":["js/task01.js","js/task02.js","js/task03.js","index.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","updatedUsers","map","user","table","randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","id","amount","reject","logSuccess","logError","warn","catch"],"mappings":";;;AAAA,MAAMA,EAAQC,GACH,IAAIC,QAASC,IAChBC,WAAW,KAAQD,EAAQF,IAAOA,KAIpCI,EAASC,GAAQC,QAAQC,sBAAsBF,OAGrDN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ;;ACXjB,MAAMK,EAAQ,CACV,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGrBC,EAAkB,CAACC,EAAUC,KAEzBC,MAAAA,EAAeF,EAASG,IAAIC,GAC9BA,EAAKP,OAASI,EAAW,IAAKG,EAAMN,QAASM,EAAKN,QAAWM,GAG1D,OAAA,IAAIhB,QAASC,IAChBA,EAAQa,MAMVX,EAASW,GAAgBT,QAAQY,MAAMH,GAG7CH,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ;;ACxBnC,MAAMe,EAA4B,CAACC,EAAKC,IAC7BC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,GAGlDK,EAAkB,EAAGC,GAAAA,EAAIC,OAAAA,MACrB5B,MAAAA,EAAQoB,EAA0B,IAAK,KACtC,OAAA,IAAIlB,QAAQ,CAACC,EAAS0B,KACzBzB,WAAW,KACYmB,KAAKE,SAAW,GAG/BtB,EAAQ,CAAEwB,GAAAA,EAAIrB,KAAMN,IAGpB6B,EAAOF,IAGZ3B,MAKL8B,EAAa,EAAGH,GAAAA,EAAIrB,KAAAA,MACtBC,QAAQC,mBAAmBmB,kBAAmBrB,QAM5CyB,EAAWJ,IACbpB,QAAQyB,qCAAqCL,+BAGjDD,EAAgB,CAAEC,GAAI,GAAIC,OAAQ,MAC7BnB,KAAKqB,GACLG,MAAMF,GAEXL,EAAgB,CAAEC,GAAI,GAAIC,OAAQ,MAC7BnB,KAAKqB,GACLG,MAAMF,GAEXL,EAAgB,CAAEC,GAAI,GAAIC,OAAQ,KAC7BnB,KAAKqB,GACLG,MAAMF,GAEXL,EAAgB,CAAEC,GAAI,GAAIC,OAAQ,MAC7BnB,KAAKqB,GACLG,MAAMF;;AC3CX,aAJA,QAAA,oBAEA,QAAA,eACA,QAAA,eACA,QAAA","file":"src.380c09c8.js","sourceRoot":"../src","sourcesContent":["const delay = ms => {\n    return new Promise((resolve) => {\n        setTimeout(() => { resolve(ms) }, ms)\n    })\n};\n\nconst logger = time => console.log(`Resolved after ${time}ms`);\n\n// Вызовы функции для проверки\ndelay(2000).then(logger); // Resolved after 2000ms\ndelay(1000).then(logger); // Resolved after 1000ms\ndelay(1500).then(logger); // Resolved after 1500ms","const users = [\n    { name: 'Mango', active: true },\n    { name: 'Poly', active: false },\n    { name: 'Ajax', active: true },\n    { name: 'Lux', active: false },\n];\n\nconst toggleUserState = (allUsers, userName) => {\n\n    const updatedUsers = allUsers.map(user =>\n        user.name === userName ? { ...user, active: !user.active } : user,\n    );\n\n    return new Promise((resolve) => {\n        resolve(updatedUsers)\n\n    })\n\n};\n\nconst logger = updatedUsers => console.table(updatedUsers);\n\n\ntoggleUserState(users, 'Mango').then(logger);\ntoggleUserState(users, 'Lux').then(logger);","const randomIntegerFromInterval = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = ({ id, amount }) => {\n    const delay = randomIntegerFromInterval(200, 500);\n    return new Promise((resolve, reject) => {\n        setTimeout(() => {\n            const canProcess = Math.random() > 0.3;\n\n            if (canProcess) {\n                resolve({ id, time: delay })\n\n            } else {\n                reject(id)\n\n            }\n        }, delay);\n    })\n\n};\n\nconst logSuccess = ({ id, time }) => {\n    console.log(`Transaction ${id} processed in ${time}ms`);\n\n\n\n};\n\nconst logError = id => {\n    console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\nmakeTransaction({ id: 70, amount: 150 })\n    .then(logSuccess)\n    .catch(logError);\n\nmakeTransaction({ id: 71, amount: 230 })\n    .then(logSuccess)\n    .catch(logError);\n\nmakeTransaction({ id: 72, amount: 75 })\n    .then(logSuccess)\n    .catch(logError);\n\nmakeTransaction({ id: 73, amount: 100 })\n    .then(logSuccess)\n    .catch(logError);","import './sass/main.scss';\n\nimport \"./js/task01\"\nimport \"./js/task02\"\nimport \"./js/task03\""]}